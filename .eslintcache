[{"/Users/shelbyrobison/Desktop/gt-pt/homework/homework19/employee-directory/src/index.js":"1","/Users/shelbyrobison/Desktop/gt-pt/homework/homework19/employee-directory/src/reportWebVitals.js":"2","/Users/shelbyrobison/Desktop/gt-pt/homework/homework19/employee-directory/src/App.js":"3","/Users/shelbyrobison/Desktop/gt-pt/homework/homework19/employee-directory/src/components/Table/Table.jsx":"4"},{"size":478,"mtime":1611715554862,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1611110684800,"results":"7","hashOfConfig":"6"},{"size":302,"mtime":1611716725722,"results":"8","hashOfConfig":"6"},{"size":3203,"mtime":1611724365464,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"yvzs72",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/shelbyrobison/Desktop/gt-pt/homework/homework19/employee-directory/src/index.js",[],["20","21"],"/Users/shelbyrobison/Desktop/gt-pt/homework/homework19/employee-directory/src/reportWebVitals.js",[],"/Users/shelbyrobison/Desktop/gt-pt/homework/homework19/employee-directory/src/App.js",[],"/Users/shelbyrobison/Desktop/gt-pt/homework/homework19/employee-directory/src/components/Table/Table.jsx",["22"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Table = () => {\n  const [users, setUsers] = useState([]);\n  const [usersToDisplay, setUsersToDisplay] = useState([]);\n  const [sortDirection, setSortDirection] = useState(\"asc\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    axios.get(\"https://randomuser.me/api/?results=50\").then((response) => {\n      console.log(response.data);\n      setUsersToDisplay(response.data.results);\n      setUsers(response.data.results);\n    });\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const filteredUsers = users.filter((user) => {\n      return user.phone.includes(searchTerm);\n    });\n\n    setUsersToDisplay(filteredUsers);\n  };\n\n  const handleReset = () => {\n    setUsersToDisplay(users);\n  };\n\n  const sortByName = () => {\n    if (sortDirection === \"asc\") {\n      sortByNameAsc();\n      setSortDirection(\"desc\");\n    } else {\n      sortByNameDesc();\n      setSortDirection(\"asc\");\n    }\n  };\n\n  const sortByNameAsc = () => {\n    const tempUsers = [...users];\n    const sortedUsers = tempUsers.sort((a, b) => {\n      const aValue = a.name.first;\n      const bValue = b.name.first;\n      if (aValue < bValue) {\n        return -1;\n      }\n      if (aValue > bValue) {\n        return 1;\n      }\n      return 0;\n    });\n    console.log(sortedUsers);\n    setUsersToDisplay(sortedUsers);\n  };\n\n  const sortByNameDesc = () => {\n    const tempUsers = [...users];\n    const sortedUsers = tempUsers.sort((a, b) => {\n      const aValue = a.name.first;\n      const bValue = b.name.first;\n      if (aValue > bValue) {\n        return -1;\n      }\n      if (aValue < bValue) {\n        return 1;\n      }\n      return 0;\n    });\n    console.log(sortedUsers);\n    setUsersToDisplay(sortedUsers);\n  };\n\n  return (\n    <div>\n      <div>\n          <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter phone number to filter\"\n          name=\"searchTerm\"\n          value={searchTerm}\n          onChange={(e) => {\n            setSearchTerm(e.target.value);\n          }}\n        ></input>\n        <button className=\"btn btn-primary\">Search</button>\n        </form>\n      </div>\n      <div>\n        <table className=\"table table-success table-striped\">\n          <thead>\n            <tr>\n              <th scope=\"col\">ID</th>\n              <th scope=\"col\">Photo</th>\n              <th scope=\"col\" onClick={sortByName}>\n                Name\n              </th>\n              <th scope=\"col\">Email</th>\n              <th scope=\"col\">Phone</th>\n            </tr>\n          </thead>\n          <tbody>\n            {usersToDisplay.map((user, index) => (\n              <tr key={index}>\n                <th scope=\"row\">{user.id.value}</th>\n                <td>\n                  <img src={user.picture.thumbnail} alt={user.name.first}></img>\n                </td>\n                <td>\n                  {user.name.first} {user.name.last}\n                </td>\n                <td>{user.email}</td>\n                <td>{user.phone}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Table;\n",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":27,"column":9,"nodeType":"29","messageId":"30","endLine":27,"endColumn":20},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'handleReset' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]